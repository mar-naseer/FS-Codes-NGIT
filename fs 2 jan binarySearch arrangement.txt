/*
Rohan has an array of integers in sorted order initially.
He need to search for an element E in that array.
Rohan has shifted a part of the beginning of the array to end of the array.
For example:
Initially, the array is : 1 2 3 4 5 6, and a part of the beginning 1 2 3 4 is shifted
After shiting the array is : 5 6 1 2 3 4
Your task is to help Rohan , to search E, in the shifted array.
If you found print its index, otherwise print -1.
Input Format:
Line-1 -> An integer N, number of elements
Line-2 -> N space separated integers, shifted array
Line-3 -> An integer E, search element.
 
Output Format:
--------------
Print the index postion if you found E,
Otherwise, print -1.


Sample Input-1:
---------------
7
14 16 18 1 2 4 13 
16

Sample Output-1:
----------------
1

Sample Input-2:
---------------
7
14 16 18 1 2 4 13 
12

Sample Output-2:
----------------
-1

*/
import java.util.*;
class Test{
    public static void main(String args[]){
     Scanner sc=new Scanner(System.in);
     int n=sc.nextInt();
     int[]a=new int [n];
     for(int i=0;i<n;i++){
         a[i]=sc.nextInt();
        }
        int e=sc.nextInt();
        int index=search(a, e);
        System.out.println(index);
    }
    public static int search(int[]a,int e){
        int pivot=findPivot(a,0,a.length-1);
        if(pivot==-1){
            return binarySearch(a,0,a.length-1,e);
        }
        if(e>a[0]){
            return binarySearch(a,0,pivot-1,e);
        }
        else{
            return binarySearch(a,pivot,a.length-1,e);
        }
    }
    public static int findPivot(int []a,int low,int high){
        if(high<low){
            return -1;
            
        }
        if(high==low){
            return low;
        }
        int mid=(low+high)/2;
        if(mid<high&&a[mid]>a[mid-1]){
            return mid;
        }
        if(mid>low&&a[mid]<a[mid-1]){
            return mid-1;
        }
        if(a[low]>=a[mid]){
            return findPivot (a,low,mid-1);
        }
        return findPivot(a,mid+1,high);
    }
    public static int binarySearch(int []a,int low,int high,int e){
        if(high<low){
            return -1;
        }
        int mid=(low+high)/2;
        if(e==a[mid]){
            return mid;
        }
        if(e>a[mid]){
            return binarySearch(a,mid+1,high,e);
        }
        return binarySearch(a,low,mid-1,e);
    }
}